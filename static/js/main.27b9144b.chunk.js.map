{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["CustomScrollbar","children","_ref$height","height","_ref$thumbColor","thumbColor","_ref$thumbWidth","thumbWidth","_ref$trackColor","trackColor","_ref$trackWidth","trackWidth","_ref$isShowTrack","isShowTrack","_ref$right","right","_ref$className","className","scrollContainerRef","useRef","useState","scrollPosition","setScrollPosition","thumbHeight","setThumbHeight","useEffect","current","visibleRatio","clientHeight","scrollHeight","React","styles","style","onScroll","thumbPosition","scrollTop","ref","width","x","y","rx","ry","fill","Math","floor","App","createElement","position","top","margin","background","ReactDOM","render","document","getElementById"],"mappings":"+TAgBaA,EAAkB,SAAH,G,QAC1BC,EAAQC,EAARD,SAAQC,IACRC,cAAM,IAAG,MAAGC,MACZC,kBAAU,IAAG,SAAMC,MACnBC,kBAAU,IAAG,IAACC,MACdC,kBAAU,IAAG,YAASC,MACtBC,kBAAU,IAAG,KAAKC,MAClBC,mBAAW,IAAG,GAAIC,MAClBC,aAAK,IAAG,IAACC,MACTC,iBAAS,IAAG,KAAE,EAGRC,EAAqBC,iBAAuB,MAClD,EAA4CC,mBAAS,GAA9CC,EAAc,KAAEC,EAAiB,KACxC,EAAsCF,mBAAS,IAAxCG,EAAW,KAAEC,EAAc,KAwBlC,OATAC,qBAAU,WACR,GAAIP,EAAmBQ,QAAS,CAC9B,IAAMC,EACJT,EAAmBQ,QAAQE,aAC3BV,EAAmBQ,QAAQG,aAC7BL,EAAeG,EAAeT,EAAmBQ,QAAQE,iBAE1D,CAAC3B,IAGF6B,+BAAKb,UAAcc,EAAgB,IAAId,EAAae,MAAO,CAAE7B,WAC3D2B,+BAAKb,UAAWc,GACdD,+BACEb,UAAWc,EACXE,SA3Ba,WACnB,GAAIf,EAAmBQ,QAAS,CAC9B,IAIMQ,EAJYhB,EAAmBQ,QAAQS,WAE3CjB,EAAmBQ,QAAQG,aAC3BX,EAAmBQ,QAAQE,eAG1BV,EAAmBQ,QAAQE,aAAeL,GAC7CD,EAAkBY,KAmBdE,IAAKlB,GAEJjB,IAGL6B,+BACEb,UAAWc,EACXM,MAAO1B,EACPR,OAAiD,OAA3C,EAAoB,OAAlBe,QAAkB,IAAlBA,GAA2B,QAAT,EAAlBA,EAAoBQ,eAAO,WAAT,EAAlBR,EAA6BU,cAAY,EAAI,EACrDI,MAAO,CAAEjB,UAKPF,GACEiB,gCACEQ,EAAG,EACHC,EAAG,EACHF,MAAO1B,EACPR,OAAO,OACPqC,GAAI7B,EAAa,EACjB8B,GAAI9B,EAAa,EACjB+B,KAAMjC,IAKZqB,gCACEQ,EAAGK,KAAKC,OAAOjC,EAAaJ,GAAc,GAC1CgC,EAAGlB,EACHgB,MAAO9B,EACPJ,OAAM,GAAKoB,EACXiB,GAAIjC,EAAa,EACjBkC,GAAIlC,EAAa,EACjBmC,KAAMrC,OCzDDwC,MAjCHA,IAERf,IAAAgB,cAAA,OACEd,MAAO,CACLe,SAAU,WACVC,IAAK,OACLC,OAAQ,OACR9C,OAAQ,QACRkC,MAAO,UAGTP,IAAAgB,cAAC9C,EAAe,CACde,MAAO,EACPV,WAAW,OACXI,WAAW,OACXF,WAAY,GACZI,WAAY,GACZR,OAAQ,IACRU,aAAa,EACbI,UAAU,oBAEVa,IAAAgB,cAAA,OACEd,MAAO,CACL7B,OAAQ,QACRkC,MAAO,OACPa,WAAY,YCvBxBC,IAASC,OAAOtB,IAAAgB,cAACD,EAAG,MAAKQ,SAASC,eAAe,W","file":"static/js/main.27b9144b.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\nimport { useEffect, useRef, useState } from 'react'\n\ninterface CustomScrollbarProps {\n  children: React.ReactNode\n  height?: number\n  thumbColor?: string\n  thumbWidth?: number\n  trackColor?: string\n  trackWidth?: number\n  isShowTrack?: boolean\n  right?: number\n  className?: string\n}\n\nexport const CustomScrollbar = ({\n  children,\n  height = 300,\n  thumbColor = '#888',\n  thumbWidth = 8,\n  trackColor = '#e0e0e0',\n  trackWidth = 8 + 2,\n  isShowTrack = true,\n  right = 0,\n  className = ''\n}: CustomScrollbarProps) => {\n  // Create ref from div element\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [scrollPosition, setScrollPosition] = useState(0)\n  const [thumbHeight, setThumbHeight] = useState(50)\n\n  const handleScroll = () => {\n    if (scrollContainerRef.current) {\n      const scrollTop = scrollContainerRef.current.scrollTop\n      const scrollHeight =\n        scrollContainerRef.current.scrollHeight -\n        scrollContainerRef.current.clientHeight\n      const thumbPosition =\n        (scrollTop / scrollHeight) *\n        (scrollContainerRef.current.clientHeight - thumbHeight)\n      setScrollPosition(thumbPosition)\n    }\n  }\n\n  useEffect(() => {\n    if (scrollContainerRef.current) {\n      const visibleRatio =\n        scrollContainerRef.current.clientHeight /\n        scrollContainerRef.current.scrollHeight\n      setThumbHeight(visibleRatio * scrollContainerRef.current.clientHeight)\n    }\n  }, [children])\n\n  return (\n    <div className={`${styles.container} ${className}`} style={{ height }}>\n      <div className={styles.outerScrollContainer}>\n        <div\n          className={styles.scrollContainer}\n          onScroll={handleScroll}\n          ref={scrollContainerRef}\n        >\n          {children}\n        </div>\n      </div>\n      <svg\n        className={styles.svgScrollbar}\n        width={trackWidth}\n        height={scrollContainerRef?.current?.clientHeight ?? 0}\n        style={{ right }}\n      >\n        {/* Track */}\n        {\n          // Show track when isShowTrack is true\n          isShowTrack && (\n            <rect\n              x={0}\n              y={0}\n              width={trackWidth}\n              height='100%'\n              rx={trackWidth / 2}\n              ry={trackWidth / 2}\n              fill={trackColor}\n            />\n          )\n        }\n        {/* Thumb */}\n        <rect\n          x={Math.floor((trackWidth - thumbWidth) / 2)}\n          y={scrollPosition}\n          width={thumbWidth}\n          height={`${thumbHeight}`}\n          rx={thumbWidth / 2}\n          ry={thumbWidth / 2}\n          fill={thumbColor}\n        />\n      </svg>\n    </div>\n  )\n}\n","import React from 'react'\nimport 'react-mini-scrollbar/dist/index.css'\nimport { CustomScrollbar } from 'react-mini-scrollbar'\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        top: '2rem',\n        margin: 'auto',\n        height: '300px',\n        width: '300px'\n      }}\n    >\n      <CustomScrollbar\n        right={1}\n        thumbColor='#f00'\n        trackColor='#0f0'\n        thumbWidth={10}\n        trackWidth={10}\n        height={300}\n        isShowTrack={true}\n        className='custom-scrollbar'\n      >\n        <div\n          style={{\n            height: '500px',\n            width: '100%',\n            background: '#ccc'\n          }}\n        ></div>\n      </CustomScrollbar>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}